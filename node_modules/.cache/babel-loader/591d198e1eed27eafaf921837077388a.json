{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a.sarikhani\\\\Desktop\\\\dokmeh\\\\src\\\\presentor\\\\BackGround.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useMousePosition } from \"../helper/useMousePosition\";\nimport { useWindowDimensions } from '../helper/useWindowDimensions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BackGround = prop => {\n  _s();\n\n  const {\n    height,\n    width\n  } = useWindowDimensions();\n  const position = useMousePosition(); // const ctxRef = useRef();\n  // const canvasRef = useRef();\n  // const mouseRef = useRef();\n  // const [mouseMovex, setMouseMovex] = useState()\n  // class Particle {\n  //   constructor(x, y, directionX, directionY, size, color) {\n  //     this.x = x;\n  //     this.y = y;\n  //     this.directionX = directionX;\n  //     this.directionY = directionY;\n  //     this.size= size;\n  //     this.color = color\n  //   }\n  //   draw(){\n  //     ctxRef.current.beginPath();\n  //     ctxRef.current.arc(this.x, this.y, this.size, 0, Math.PI * 2, false)\n  //     ctxRef.current.fillStyle = \"rgba(255, 255, 255, 0.2)\";\n  //     ctxRef.current.fill();\n  //   }\n  //   update() {\n  //     if (this.x > width || this.x < 0) {\n  //       this.directionX = -this.directionX;\n  //     }\n  //     if (this.y > height || this.x < 0) {\n  //       this.directionY = -this.directionY\n  //     }\n  //     let dx = position.x - this.x;\n  //     let dy = position.y - this.y;\n  //     let distance = Math.sqrt(dx*dx + dy*dy)\n  //     if (distance < (height/(80) * width/(80)) + this.size) {\n  //       if (position.x < this.x && this.x < width - this.size * 10) {\n  //         this.x += 10;\n  //       }\n  //       if (position.x > this.x && this.x > this.size * 10 ) {\n  //         this.x -= 10;\n  //       }\n  //       if (position.y < this.y && this.y < height - this.size * 10) {\n  //         this.y += 10;\n  //       }\n  //       if (position.y > this.y && this.y > this.size * 10)  {\n  //         this.y -= 10;\n  //       }\n  //     }\n  //     this.x += this.directionX;\n  //     this.y += this.directionY;\n  //     this.draw();\n  //   }\n  // }\n  // let particleArray;\n  // const inits = () => {\n  //   particleArray = [];\n  //   let numberOfParticles = (canvasRef.current.height * canvasRef.current.width) / 9000;\n  //   for (let i = 0; i < numberOfParticles*1.2; i++){\n  //     let size = (Math.random() * 5 ) + 1\n  //     let x = (Math.random() * ((width - size * 1) - (size * 1)) + size * 1);\n  //     let y = (Math.random() * ((height - size * 1) - (size * 1)) + size * 1);\n  //     let directionX = (Math.random() * 5) - 2.5;\n  //     let directionY = (Math.random() * 5) - 2.5;\n  //     let color = '#ccc'\n  //     particleArray.push(new Particle(x, y, directionX, directionY, size, color))\n  //   }\n  // }\n  // const connet = () => {\n  //   let opacityValue = 0.5\n  //   for (let a = 0; a < particleArray.length; a++) {\n  //     for (let b = a; b < particleArray.length; b++) {\n  //       let distance = ((particleArray[a].x - particleArray[b].x) * (particleArray[a].x - particleArray[b].x))\n  //       + ((particleArray[a].y - particleArray[b].y) * (particleArray[a].y - particleArray[b].y));\n  //       if (distance < (canvasRef.current.width/7) * (canvasRef.current.height/7)) {\n  //         opacityValue = 0.5 - (distance/50000);\n  //         ctxRef.current.strokeStyle =`rgba(255, 255, 255, ${opacityValue})`;\n  //         ctxRef.current.lineWidth = 1;\n  //         ctxRef.current.beginPath();\n  //         ctxRef.current.moveTo(particleArray[a].x, particleArray[a].y);\n  //         ctxRef.current.lineTo(particleArray[b].x, particleArray[b].y);\n  //         ctxRef.current.stroke();\n  //       }\n  //     }\n  //   }\n  // }\n  // const animate = () => {\n  //   requestAnimationFrame(animate);\n  //   ctxRef.current.clearRect(0,0,width, height);\n  //   for (let i = 0; i < particleArray.length; i++) {\n  //     particleArray[i].update();\n  //   }\n  //   connet();\n  // }\n  // useEffect(() => {\n  //   canvasRef.current = document.getElementById(\"canvas1\");\n  //   ctxRef.current = canvasRef.current.getContext('2d');\n  //   canvasRef.current.width = width;\n  //   canvasRef.current.height = height;\n  //   mouseRef.current = {\n  //     x: position.x,\n  //     y:position.y,\n  //     radius: (canvasRef.current.height/(80) * canvasRef.current.width/80)\n  //   }\n  //   // inits();\n  //   // animate();\n  //   console.log(ctxRef.current)\n  // }, []); \n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"canvas1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(BackGround, \"1DV+iMlQ04SiaFJkmxfGTjQt1C4=\", false, function () {\n  return [useWindowDimensions, useMousePosition];\n});\n\n_c = BackGround;\nexport default BackGround;\n\nvar _c;\n\n$RefreshReg$(_c, \"BackGround\");","map":{"version":3,"sources":["C:/Users/a.sarikhani/Desktop/dokmeh/src/presentor/BackGround.js"],"names":["React","useState","useEffect","useRef","useMousePosition","useWindowDimensions","BackGround","prop","height","width","position"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SAAQC,mBAAR,QAAkC,+BAAlC;;;;AAGA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAAA;;AAI3B,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBJ,mBAAmB,EAA7C;AACA,QAAMK,QAAQ,GAAGN,gBAAgB,EAAjC,CAL2B,CAO3B;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAEA,sBACE;AAAA,2BAEE;AAAS,MAAA,EAAE,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA;AAFF,mBADF;AASD,CA5ID;;GAAME,U;UAIsBD,mB,EACTD,gB;;;KALbE,U;AA+IN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useMousePosition } from \"../helper/useMousePosition\";\r\nimport {useWindowDimensions} from '../helper/useWindowDimensions';\r\n\r\n\r\nconst BackGround = (prop) => { \r\n\r\n\r\n  \r\n  const { height, width } = useWindowDimensions();\r\n  const position = useMousePosition();\r\n\r\n  // const ctxRef = useRef();\r\n  // const canvasRef = useRef();\r\n  // const mouseRef = useRef();\r\n  // const [mouseMovex, setMouseMovex] = useState()\r\n\r\n\r\n  // class Particle {\r\n  //   constructor(x, y, directionX, directionY, size, color) {\r\n  //     this.x = x;\r\n  //     this.y = y;\r\n  //     this.directionX = directionX;\r\n  //     this.directionY = directionY;\r\n  //     this.size= size;\r\n  //     this.color = color\r\n  //   }\r\n  \r\n  //   draw(){\r\n  //     ctxRef.current.beginPath();\r\n  //     ctxRef.current.arc(this.x, this.y, this.size, 0, Math.PI * 2, false)\r\n  //     ctxRef.current.fillStyle = \"rgba(255, 255, 255, 0.2)\";\r\n  //     ctxRef.current.fill();\r\n  //   }\r\n  \r\n  //   update() {\r\n  //     if (this.x > width || this.x < 0) {\r\n  //       this.directionX = -this.directionX;\r\n  //     }\r\n  //     if (this.y > height || this.x < 0) {\r\n  //       this.directionY = -this.directionY\r\n  //     }\r\n  \r\n  //     let dx = position.x - this.x;\r\n  //     let dy = position.y - this.y;\r\n  //     let distance = Math.sqrt(dx*dx + dy*dy)\r\n  //     if (distance < (height/(80) * width/(80)) + this.size) {\r\n  //       if (position.x < this.x && this.x < width - this.size * 10) {\r\n  //         this.x += 10;\r\n  //       }\r\n  //       if (position.x > this.x && this.x > this.size * 10 ) {\r\n  //         this.x -= 10;\r\n  //       }\r\n  //       if (position.y < this.y && this.y < height - this.size * 10) {\r\n  //         this.y += 10;\r\n  //       }\r\n  //       if (position.y > this.y && this.y > this.size * 10)  {\r\n  //         this.y -= 10;\r\n  //       }\r\n  //     }\r\n  //     this.x += this.directionX;\r\n  //     this.y += this.directionY;\r\n  //     this.draw();\r\n  //   }\r\n  // }\r\n\r\n  // let particleArray;\r\n\r\n  \r\n\r\n  // const inits = () => {\r\n  //   particleArray = [];\r\n  //   let numberOfParticles = (canvasRef.current.height * canvasRef.current.width) / 9000;\r\n  //   for (let i = 0; i < numberOfParticles*1.2; i++){\r\n  //     let size = (Math.random() * 5 ) + 1\r\n  //     let x = (Math.random() * ((width - size * 1) - (size * 1)) + size * 1);\r\n  //     let y = (Math.random() * ((height - size * 1) - (size * 1)) + size * 1);\r\n  //     let directionX = (Math.random() * 5) - 2.5;\r\n  //     let directionY = (Math.random() * 5) - 2.5;\r\n  //     let color = '#ccc'\r\n  //     particleArray.push(new Particle(x, y, directionX, directionY, size, color))\r\n  //   }\r\n    \r\n  \r\n  // }\r\n\r\n  // const connet = () => {\r\n  //   let opacityValue = 0.5\r\n  //   for (let a = 0; a < particleArray.length; a++) {\r\n  //     for (let b = a; b < particleArray.length; b++) {\r\n  //       let distance = ((particleArray[a].x - particleArray[b].x) * (particleArray[a].x - particleArray[b].x))\r\n  //       + ((particleArray[a].y - particleArray[b].y) * (particleArray[a].y - particleArray[b].y));\r\n  //       if (distance < (canvasRef.current.width/7) * (canvasRef.current.height/7)) {\r\n  //         opacityValue = 0.5 - (distance/50000);\r\n  //         ctxRef.current.strokeStyle =`rgba(255, 255, 255, ${opacityValue})`;\r\n  //         ctxRef.current.lineWidth = 1;\r\n  //         ctxRef.current.beginPath();\r\n  //         ctxRef.current.moveTo(particleArray[a].x, particleArray[a].y);\r\n  //         ctxRef.current.lineTo(particleArray[b].x, particleArray[b].y);\r\n  //         ctxRef.current.stroke();\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // const animate = () => {\r\n  //   requestAnimationFrame(animate);\r\n  //   ctxRef.current.clearRect(0,0,width, height);\r\n  \r\n  //   for (let i = 0; i < particleArray.length; i++) {\r\n  //     particleArray[i].update();\r\n  //   }\r\n  //   connet();\r\n  // }\r\n\r\n  \r\n\r\n\r\n  // useEffect(() => {\r\n  //   canvasRef.current = document.getElementById(\"canvas1\");\r\n  //   ctxRef.current = canvasRef.current.getContext('2d');\r\n  //   canvasRef.current.width = width;\r\n  //   canvasRef.current.height = height;\r\n  //   mouseRef.current = {\r\n  //     x: position.x,\r\n  //     y:position.y,\r\n  //     radius: (canvasRef.current.height/(80) * canvasRef.current.width/80)\r\n  //   }\r\n  //   // inits();\r\n  //   // animate();\r\n  //   console.log(ctxRef.current)\r\n    \r\n    \r\n\r\n  // }, []); \r\n\r\n  return (\r\n    <>\r\n    \r\n      <canvas  id=\"canvas1\"></canvas>\r\n      {/* width: {width} ~ height: {height}\r\n      {position.x}:{position.y} */}\r\n\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default BackGround;"]},"metadata":{},"sourceType":"module"}