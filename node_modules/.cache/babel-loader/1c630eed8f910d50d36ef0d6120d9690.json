{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a.sarikhani\\\\Desktop\\\\dokmeh\\\\src\\\\presentor\\\\BackGround.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useMousePosition } from \"../helper/useMousePosition\";\nimport { useWindowDimensions } from '../helper/useWindowDimensions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BackGround = () => {\n  _s();\n\n  const {\n    height,\n    width\n  } = useWindowDimensions();\n  const position = useMousePosition();\n  const ctxRef = useRef();\n  const canvasRef = useRef();\n  canvasRef.current = document.getElementById(\"canvas1\");\n  const mouseRef = useRef();\n  const [mouseMovex, setMouseMovex] = useState();\n\n  class Particle {\n    constructor(x, y, directionX, directionY, size, color) {\n      this.x = x;\n      this.y = y;\n      this.directionX = directionX;\n      this.directionY = directionY;\n      this.size = size;\n      this.color = color;\n    }\n\n    draw() {\n      ctxRef.current.beginPath();\n      ctxRef.current.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);\n      ctxRef.current.fillStyle = \"rgba(255, 255, 255, 0.2)\";\n      ctxRef.current.fill();\n    }\n\n    update() {\n      if (this.x > width || this.x < 0) {\n        this.directionX = -this.directionX;\n      }\n\n      if (this.y > height || this.x < 0) {\n        this.directionY = -this.directionY;\n      }\n\n      let dx = position.x - this.x;\n      let dy = position.y - this.y;\n      let distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance < height / 80 * width / 80 + this.size) {\n        if (position.x < this.x && this.x < width - this.size * 10) {\n          this.x += 10;\n        }\n\n        if (position.x > this.x && this.x > this.size * 10) {\n          this.x -= 10;\n        }\n\n        if (position.y < this.y && this.y < height - this.size * 10) {\n          this.y += 10;\n        }\n\n        if (position.y > this.y && this.y > this.size * 10) {\n          this.y -= 10;\n        }\n      }\n\n      this.x += this.directionX;\n      this.y += this.directionY;\n      this.draw();\n    }\n\n  }\n\n  let particleArray;\n\n  const inits = () => {\n    particleArray = [];\n    let numberOfParticles = canvasRef.current.height * canvasRef.current.width / 9000;\n\n    for (let i = 0; i < numberOfParticles * 1.2; i++) {\n      let size = Math.random() * 5 + 1;\n      let x = Math.random() * (width - size * 1 - size * 1) + size * 1;\n      let y = Math.random() * (height - size * 1 - size * 1) + size * 1;\n      let directionX = Math.random() * 5 - 2.5;\n      let directionY = Math.random() * 5 - 2.5;\n      let color = '#ccc';\n      particleArray.push(new Particle(x, y, directionX, directionY, size, color));\n    }\n  };\n\n  const connet = () => {\n    let opacityValue = 0.5;\n\n    for (let a = 0; a < particleArray.length; a++) {\n      for (let b = a; b < particleArray.length; b++) {\n        let distance = (particleArray[a].x - particleArray[b].x) * (particleArray[a].x - particleArray[b].x) + (particleArray[a].y - particleArray[b].y) * (particleArray[a].y - particleArray[b].y);\n\n        if (distance < canvasRef.current.width / 7 * (canvasRef.current.height / 7)) {\n          opacityValue = 0.5 - distance / 50000;\n          ctxRef.current.strokeStyle = `rgba(255, 255, 255, ${opacityValue})`;\n          ctxRef.current.lineWidth = 1;\n          ctxRef.current.beginPath();\n          ctxRef.current.moveTo(particleArray[a].x, particleArray[a].y);\n          ctxRef.current.lineTo(particleArray[b].x, particleArray[b].y);\n          ctxRef.current.stroke();\n        }\n      }\n    }\n  };\n\n  const animate = () => {\n    requestAnimationFrame(animate);\n    ctxRef.current.clearRect(0, 0, width, height);\n\n    for (let i = 0; i < particleArray.length; i++) {\n      particleArray[i].update();\n    }\n\n    connet();\n  }; // const updateParticle = (e) => {\n  //   let x = new Particle();\n  //   console.log(x.update())\n  // }\n\n\n  useEffect(() => {\n    canvasRef.current = document.getElementById(\"canvas1\");\n    ctxRef.current = canvasRef.current.getContext('2d');\n    canvasRef.current.width = width;\n    canvasRef.current.height = height;\n    mouseRef.current = {\n      x: position.x,\n      y: position.y,\n      radius: canvasRef.current.height / 80 * canvasRef.current.width / 80\n    };\n    inits();\n    animate();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      mousemove: updateParticle(),\n      id: \"canvas1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(BackGround, \"TF5x2MZ4f0lVKEx0AK/rmaZUoOM=\", false, function () {\n  return [useWindowDimensions, useMousePosition];\n});\n\n_c = BackGround;\nexport default BackGround;\n\nvar _c;\n\n$RefreshReg$(_c, \"BackGround\");","map":{"version":3,"sources":["C:/Users/a.sarikhani/Desktop/dokmeh/src/presentor/BackGround.js"],"names":["React","useState","useEffect","useRef","useMousePosition","useWindowDimensions","BackGround","height","width","position","ctxRef","canvasRef","current","document","getElementById","mouseRef","mouseMovex","setMouseMovex","Particle","constructor","x","y","directionX","directionY","size","color","draw","beginPath","arc","Math","PI","fillStyle","fill","update","dx","dy","distance","sqrt","particleArray","inits","numberOfParticles","i","random","push","connet","opacityValue","a","length","b","strokeStyle","lineWidth","moveTo","lineTo","stroke","animate","requestAnimationFrame","clearRect","getContext","radius","updateParticle"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useMousePosition } from \"../helper/useMousePosition\";\r\nimport {useWindowDimensions} from '../helper/useWindowDimensions';\r\n\r\n\r\nconst BackGround = () => { \r\n\r\n\r\n  \r\n  const { height, width } = useWindowDimensions();\r\n  const position = useMousePosition();\r\n\r\n  const ctxRef = useRef();\r\n  const canvasRef = useRef();\r\n  canvasRef.current = document.getElementById(\"canvas1\");\r\n  const mouseRef = useRef();\r\n  const [mouseMovex, setMouseMovex] = useState()\r\n\r\n\r\n  class Particle {\r\n    constructor(x, y, directionX, directionY, size, color) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.directionX = directionX;\r\n      this.directionY = directionY;\r\n      this.size= size;\r\n      this.color = color\r\n    }\r\n  \r\n    draw(){\r\n      ctxRef.current.beginPath();\r\n      ctxRef.current.arc(this.x, this.y, this.size, 0, Math.PI * 2, false)\r\n      ctxRef.current.fillStyle = \"rgba(255, 255, 255, 0.2)\";\r\n      ctxRef.current.fill();\r\n    }\r\n  \r\n    update() {\r\n      if (this.x > width || this.x < 0) {\r\n        this.directionX = -this.directionX;\r\n      }\r\n      if (this.y > height || this.x < 0) {\r\n        this.directionY = -this.directionY\r\n      }\r\n  \r\n      let dx = position.x - this.x;\r\n      let dy = position.y - this.y;\r\n      let distance = Math.sqrt(dx*dx + dy*dy)\r\n      if (distance < (height/(80) * width/(80)) + this.size) {\r\n        if (position.x < this.x && this.x < width - this.size * 10) {\r\n          this.x += 10;\r\n        }\r\n        if (position.x > this.x && this.x > this.size * 10 ) {\r\n          this.x -= 10;\r\n        }\r\n        if (position.y < this.y && this.y < height - this.size * 10) {\r\n          this.y += 10;\r\n        }\r\n        if (position.y > this.y && this.y > this.size * 10)  {\r\n          this.y -= 10;\r\n        }\r\n      }\r\n      this.x += this.directionX;\r\n      this.y += this.directionY;\r\n      this.draw();\r\n    }\r\n  }\r\n\r\n  let particleArray;\r\n\r\n  \r\n\r\n  const inits = () => {\r\n    particleArray = [];\r\n    let numberOfParticles = (canvasRef.current.height * canvasRef.current.width) / 9000;\r\n    for (let i = 0; i < numberOfParticles*1.2; i++){\r\n      let size = (Math.random() * 5 ) + 1\r\n      let x = (Math.random() * ((width - size * 1) - (size * 1)) + size * 1);\r\n      let y = (Math.random() * ((height - size * 1) - (size * 1)) + size * 1);\r\n      let directionX = (Math.random() * 5) - 2.5;\r\n      let directionY = (Math.random() * 5) - 2.5;\r\n      let color = '#ccc'\r\n      particleArray.push(new Particle(x, y, directionX, directionY, size, color))\r\n    }\r\n    \r\n  \r\n  }\r\n\r\n  const connet = () => {\r\n    let opacityValue = 0.5\r\n    for (let a = 0; a < particleArray.length; a++) {\r\n      for (let b = a; b < particleArray.length; b++) {\r\n        let distance = ((particleArray[a].x - particleArray[b].x) * (particleArray[a].x - particleArray[b].x))\r\n        + ((particleArray[a].y - particleArray[b].y) * (particleArray[a].y - particleArray[b].y));\r\n        if (distance < (canvasRef.current.width/7) * (canvasRef.current.height/7)) {\r\n          opacityValue = 0.5 - (distance/50000);\r\n          ctxRef.current.strokeStyle =`rgba(255, 255, 255, ${opacityValue})`;\r\n          ctxRef.current.lineWidth = 1;\r\n          ctxRef.current.beginPath();\r\n          ctxRef.current.moveTo(particleArray[a].x, particleArray[a].y);\r\n          ctxRef.current.lineTo(particleArray[b].x, particleArray[b].y);\r\n          ctxRef.current.stroke();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const animate = () => {\r\n    requestAnimationFrame(animate);\r\n    ctxRef.current.clearRect(0,0,width, height);\r\n  \r\n    for (let i = 0; i < particleArray.length; i++) {\r\n      particleArray[i].update();\r\n    }\r\n    connet();\r\n  }\r\n\r\n  // const updateParticle = (e) => {\r\n  //   let x = new Particle();\r\n  //   console.log(x.update())\r\n  // }\r\n\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    canvasRef.current = document.getElementById(\"canvas1\");\r\n    ctxRef.current = canvasRef.current.getContext('2d');\r\n    canvasRef.current.width = width;\r\n    canvasRef.current.height = height;\r\n    mouseRef.current = {\r\n      x: position.x,\r\n      y:position.y,\r\n      radius: (canvasRef.current.height/(80) * canvasRef.current.width/80)\r\n    }\r\n    inits();\r\n    animate();\r\n    \r\n    \r\n    \r\n\r\n  }, []); \r\n\r\n  return (\r\n    <>\r\n    \r\n      <canvas mousemove={updateParticle()} id=\"canvas1\"></canvas>\r\n      {/* width: {width} ~ height: {height}\r\n      {position.x}:{position.y} */}\r\n\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default BackGround;"]},"metadata":{},"sourceType":"module"}