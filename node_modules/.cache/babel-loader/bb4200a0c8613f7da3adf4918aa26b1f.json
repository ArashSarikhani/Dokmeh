{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a.sarikhani\\\\Desktop\\\\dokmeh\\\\src\\\\presentor\\\\BackGround.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useMousePosition } from \"../helper/useMousePosition\";\nimport { useWindowDimensions } from '../helper/useWindowDimensions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BackGround = () => {\n  _s();\n\n  const {\n    height,\n    width\n  } = useWindowDimensions();\n  const position = useMousePosition();\n  const ctxRef = useRef();\n  const canvasRef = useRef();\n  const mouseRef = useRef();\n  const [mouseMove, setMouseMove] = useState({\n    x: position.x,\n    y: position.y,\n    // radius: (canvasRef.current.height/(80) * canvasRef.current.width/80)\n    radius: null\n  });\n\n  class Particle {\n    constructor(x, y, directionX, directionY, size, color) {\n      this.x = x;\n      this.y = y;\n      this.directionX = directionX;\n      this.directionY = directionY;\n      this.size = size;\n      this.color = color;\n    }\n\n    draw() {\n      ctxRef.current.beginPath();\n      ctxRef.current.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);\n      ctxRef.current.fillStyle = \"rgba(255, 255, 255, 0.2)\";\n      ctxRef.current.fill();\n    }\n\n    update() {\n      if (this.x > canvasRef.current.width || this.x < 0) {\n        this.directionX = -this.directionX;\n      }\n\n      if (this.y > canvasRef.current.height || this.x < 0) {\n        this.directionY = -this.directionY;\n      }\n\n      let dx = position.x - this.x;\n      let dy = position.y - this.y;\n      let distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance < mouseRef.current.radius + this.size) {\n        if (position.x < this.x && this.x < canvasRef.current.width - this.size * 10) {\n          this.x += 10;\n        }\n\n        if (position.x > this.x && this.x > this.size * 10) {\n          this.x -= 10;\n        }\n\n        if (position.y < this.y && this.y < canvasRef.current.height - this.size * 10) {\n          this.y += 10;\n        }\n\n        if (position.y > this.y && this.y > this.size * 10) {\n          this.y -= 10;\n        }\n      }\n\n      this.x += this.directionX;\n      this.y += this.directionY;\n      this.draw();\n    }\n\n  }\n\n  let particleArray;\n\n  const inits = () => {\n    particleArray = [];\n    let numberOfParticles = canvasRef.current.height * canvasRef.current.width / 9000;\n\n    for (let i = 0; i < numberOfParticles * 1.2; i++) {\n      let size = Math.random() * 5 + 1;\n      let x = Math.random() * (width - size * 1 - size * 1) + size * 1;\n      let y = Math.random() * (height - size * 1 - size * 1) + size * 1;\n      let directionX = Math.random() * 5 - 2.5;\n      let directionY = Math.random() * 5 - 2.5;\n      let color = '#ccc';\n      particleArray.push(new Particle(x, y, directionX, directionY, size, color));\n    }\n  };\n\n  const connet = () => {\n    let opacityValue = 0.5;\n\n    for (let a = 0; a < particleArray.length; a++) {\n      for (let b = a; b < particleArray.length; b++) {\n        let distance = (particleArray[a].x - particleArray[b].x) * (particleArray[a].x - particleArray[b].x) + (particleArray[a].y - particleArray[b].y) * (particleArray[a].y - particleArray[b].y);\n\n        if (distance < canvasRef.current.width / 7 * (canvasRef.current.height / 7)) {\n          opacityValue = 0.5 - distance / 50000;\n          ctxRef.current.strokeStyle = `rgba(255, 255, 255, ${opacityValue})`;\n          ctxRef.current.lineWidth = 1;\n          ctxRef.current.beginPath();\n          ctxRef.current.moveTo(particleArray[a].x, particleArray[a].y);\n          ctxRef.current.lineTo(particleArray[b].x, particleArray[b].y);\n          ctxRef.current.stroke();\n        }\n      }\n    }\n  };\n\n  const animate = () => {\n    requestAnimationFrame(animate);\n    ctxRef.current.clearRect(0, 0, width, height);\n\n    for (let i = 0; i < particleArray.length; i++) {\n      particleArray[i].update();\n    }\n\n    connet();\n  };\n\n  function updateParticle() {\n    set;\n    console.log(`x: ${mouseMove.x}`);\n  }\n\n  useEffect(() => {\n    canvasRef.current = document.getElementById(\"canvas1\");\n    ctxRef.current = canvasRef.current.getContext('2d');\n    canvasRef.current.width = width;\n    canvasRef.current.height = height;\n    mouseRef.current = {\n      x: position.x,\n      y: position.y,\n      radius: canvasRef.current.height / 80 * canvasRef.current.width / 80\n    };\n    inits();\n    animate();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      onMouseMove: updateParticle(),\n      id: \"canvas1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(BackGround, \"AN6QKd2hCTO0/ZUaZ1B+8BZGQjU=\", false, function () {\n  return [useWindowDimensions, useMousePosition];\n});\n\n_c = BackGround;\nexport default BackGround;\n\nvar _c;\n\n$RefreshReg$(_c, \"BackGround\");","map":{"version":3,"sources":["C:/Users/a.sarikhani/Desktop/dokmeh/src/presentor/BackGround.js"],"names":["React","useState","useEffect","useRef","useMousePosition","useWindowDimensions","BackGround","height","width","position","ctxRef","canvasRef","mouseRef","mouseMove","setMouseMove","x","y","radius","Particle","constructor","directionX","directionY","size","color","draw","current","beginPath","arc","Math","PI","fillStyle","fill","update","dx","dy","distance","sqrt","particleArray","inits","numberOfParticles","i","random","push","connet","opacityValue","a","length","b","strokeStyle","lineWidth","moveTo","lineTo","stroke","animate","requestAnimationFrame","clearRect","updateParticle","set","console","log","document","getElementById","getContext"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SAAQC,mBAAR,QAAkC,+BAAlC;;;;AAGA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAGvB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBH,mBAAmB,EAA7C;AACA,QAAMI,QAAQ,GAAGL,gBAAgB,EAAjC;AAEA,QAAMM,MAAM,GAAGP,MAAM,EAArB;AACA,QAAMQ,SAAS,GAAGR,MAAM,EAAxB;AACA,QAAMS,QAAQ,GAAGT,MAAM,EAAvB;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC;AACzCc,IAAAA,CAAC,EAAEN,QAAQ,CAACM,CAD6B;AAEzCC,IAAAA,CAAC,EAAEP,QAAQ,CAACO,CAF6B;AAGzC;AACAC,IAAAA,MAAM,EAAE;AAJiC,GAAD,CAA1C;;AAQA,QAAMC,QAAN,CAAe;AACbC,IAAAA,WAAW,CAACJ,CAAD,EAAIC,CAAJ,EAAOI,UAAP,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,KAArC,EAA4C;AACrD,WAAKR,CAAL,GAASA,CAAT;AACA,WAAKC,CAAL,GAASA,CAAT;AACA,WAAKI,UAAL,GAAkBA,UAAlB;AACA,WAAKC,UAAL,GAAkBA,UAAlB;AACA,WAAKC,IAAL,GAAWA,IAAX;AACA,WAAKC,KAAL,GAAaA,KAAb;AACD;;AAEDC,IAAAA,IAAI,GAAE;AACJd,MAAAA,MAAM,CAACe,OAAP,CAAeC,SAAf;AACAhB,MAAAA,MAAM,CAACe,OAAP,CAAeE,GAAf,CAAmB,KAAKZ,CAAxB,EAA2B,KAAKC,CAAhC,EAAmC,KAAKM,IAAxC,EAA8C,CAA9C,EAAiDM,IAAI,CAACC,EAAL,GAAU,CAA3D,EAA8D,KAA9D;AACAnB,MAAAA,MAAM,CAACe,OAAP,CAAeK,SAAf,GAA2B,0BAA3B;AACApB,MAAAA,MAAM,CAACe,OAAP,CAAeM,IAAf;AACD;;AAEDC,IAAAA,MAAM,GAAG;AACP,UAAI,KAAKjB,CAAL,GAASJ,SAAS,CAACc,OAAV,CAAkBjB,KAA3B,IAAoC,KAAKO,CAAL,GAAS,CAAjD,EAAoD;AAClD,aAAKK,UAAL,GAAkB,CAAC,KAAKA,UAAxB;AACD;;AACD,UAAI,KAAKJ,CAAL,GAASL,SAAS,CAACc,OAAV,CAAkBlB,MAA3B,IAAqC,KAAKQ,CAAL,GAAS,CAAlD,EAAqD;AACnD,aAAKM,UAAL,GAAkB,CAAC,KAAKA,UAAxB;AACD;;AAED,UAAIY,EAAE,GAAGxB,QAAQ,CAACM,CAAT,GAAa,KAAKA,CAA3B;AACA,UAAImB,EAAE,GAAGzB,QAAQ,CAACO,CAAT,GAAa,KAAKA,CAA3B;AACA,UAAImB,QAAQ,GAAGP,IAAI,CAACQ,IAAL,CAAUH,EAAE,GAACA,EAAH,GAAQC,EAAE,GAACA,EAArB,CAAf;;AACA,UAAIC,QAAQ,GAAGvB,QAAQ,CAACa,OAAT,CAAiBR,MAAjB,GAA0B,KAAKK,IAA9C,EAAoD;AAClD,YAAIb,QAAQ,CAACM,CAAT,GAAa,KAAKA,CAAlB,IAAuB,KAAKA,CAAL,GAASJ,SAAS,CAACc,OAAV,CAAkBjB,KAAlB,GAA0B,KAAKc,IAAL,GAAY,EAA1E,EAA8E;AAC5E,eAAKP,CAAL,IAAU,EAAV;AACD;;AACD,YAAIN,QAAQ,CAACM,CAAT,GAAa,KAAKA,CAAlB,IAAuB,KAAKA,CAAL,GAAS,KAAKO,IAAL,GAAY,EAAhD,EAAqD;AACnD,eAAKP,CAAL,IAAU,EAAV;AACD;;AACD,YAAIN,QAAQ,CAACO,CAAT,GAAa,KAAKA,CAAlB,IAAuB,KAAKA,CAAL,GAASL,SAAS,CAACc,OAAV,CAAkBlB,MAAlB,GAA2B,KAAKe,IAAL,GAAY,EAA3E,EAA+E;AAC7E,eAAKN,CAAL,IAAU,EAAV;AACD;;AACD,YAAIP,QAAQ,CAACO,CAAT,GAAa,KAAKA,CAAlB,IAAuB,KAAKA,CAAL,GAAS,KAAKM,IAAL,GAAY,EAAhD,EAAqD;AACnD,eAAKN,CAAL,IAAU,EAAV;AACD;AACF;;AACD,WAAKD,CAAL,IAAU,KAAKK,UAAf;AACA,WAAKJ,CAAL,IAAU,KAAKK,UAAf;AACA,WAAKG,IAAL;AACD;;AA7CY;;AAgDf,MAAIa,aAAJ;;AAIA,QAAMC,KAAK,GAAG,MAAM;AAClBD,IAAAA,aAAa,GAAG,EAAhB;AACA,QAAIE,iBAAiB,GAAI5B,SAAS,CAACc,OAAV,CAAkBlB,MAAlB,GAA2BI,SAAS,CAACc,OAAV,CAAkBjB,KAA9C,GAAuD,IAA/E;;AACA,SAAK,IAAIgC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,iBAAiB,GAAC,GAAtC,EAA2CC,CAAC,EAA5C,EAA+C;AAC7C,UAAIlB,IAAI,GAAIM,IAAI,CAACa,MAAL,KAAgB,CAAjB,GAAuB,CAAlC;AACA,UAAI1B,CAAC,GAAIa,IAAI,CAACa,MAAL,MAAkBjC,KAAK,GAAGc,IAAI,GAAG,CAAhB,GAAsBA,IAAI,GAAG,CAA9C,IAAoDA,IAAI,GAAG,CAApE;AACA,UAAIN,CAAC,GAAIY,IAAI,CAACa,MAAL,MAAkBlC,MAAM,GAAGe,IAAI,GAAG,CAAjB,GAAuBA,IAAI,GAAG,CAA/C,IAAqDA,IAAI,GAAG,CAArE;AACA,UAAIF,UAAU,GAAIQ,IAAI,CAACa,MAAL,KAAgB,CAAjB,GAAsB,GAAvC;AACA,UAAIpB,UAAU,GAAIO,IAAI,CAACa,MAAL,KAAgB,CAAjB,GAAsB,GAAvC;AACA,UAAIlB,KAAK,GAAG,MAAZ;AACAc,MAAAA,aAAa,CAACK,IAAd,CAAmB,IAAIxB,QAAJ,CAAaH,CAAb,EAAgBC,CAAhB,EAAmBI,UAAnB,EAA+BC,UAA/B,EAA2CC,IAA3C,EAAiDC,KAAjD,CAAnB;AACD;AAGF,GAdD;;AAgBA,QAAMoB,MAAM,GAAG,MAAM;AACnB,QAAIC,YAAY,GAAG,GAAnB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,aAAa,CAACS,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,WAAK,IAAIE,CAAC,GAAGF,CAAb,EAAgBE,CAAC,GAAGV,aAAa,CAACS,MAAlC,EAA0CC,CAAC,EAA3C,EAA+C;AAC7C,YAAIZ,QAAQ,GAAI,CAACE,aAAa,CAACQ,CAAD,CAAb,CAAiB9B,CAAjB,GAAqBsB,aAAa,CAACU,CAAD,CAAb,CAAiBhC,CAAvC,KAA6CsB,aAAa,CAACQ,CAAD,CAAb,CAAiB9B,CAAjB,GAAqBsB,aAAa,CAACU,CAAD,CAAb,CAAiBhC,CAAnF,CAAD,GACZ,CAACsB,aAAa,CAACQ,CAAD,CAAb,CAAiB7B,CAAjB,GAAqBqB,aAAa,CAACU,CAAD,CAAb,CAAiB/B,CAAvC,KAA6CqB,aAAa,CAACQ,CAAD,CAAb,CAAiB7B,CAAjB,GAAqBqB,aAAa,CAACU,CAAD,CAAb,CAAiB/B,CAAnF,CADH;;AAEA,YAAImB,QAAQ,GAAIxB,SAAS,CAACc,OAAV,CAAkBjB,KAAlB,GAAwB,CAAzB,IAA+BG,SAAS,CAACc,OAAV,CAAkBlB,MAAlB,GAAyB,CAAxD,CAAf,EAA2E;AACzEqC,UAAAA,YAAY,GAAG,MAAOT,QAAQ,GAAC,KAA/B;AACAzB,UAAAA,MAAM,CAACe,OAAP,CAAeuB,WAAf,GAA6B,uBAAsBJ,YAAa,GAAhE;AACAlC,UAAAA,MAAM,CAACe,OAAP,CAAewB,SAAf,GAA2B,CAA3B;AACAvC,UAAAA,MAAM,CAACe,OAAP,CAAeC,SAAf;AACAhB,UAAAA,MAAM,CAACe,OAAP,CAAeyB,MAAf,CAAsBb,aAAa,CAACQ,CAAD,CAAb,CAAiB9B,CAAvC,EAA0CsB,aAAa,CAACQ,CAAD,CAAb,CAAiB7B,CAA3D;AACAN,UAAAA,MAAM,CAACe,OAAP,CAAe0B,MAAf,CAAsBd,aAAa,CAACU,CAAD,CAAb,CAAiBhC,CAAvC,EAA0CsB,aAAa,CAACU,CAAD,CAAb,CAAiB/B,CAA3D;AACAN,UAAAA,MAAM,CAACe,OAAP,CAAe2B,MAAf;AACD;AACF;AACF;AACF,GAjBD;;AAmBA,QAAMC,OAAO,GAAG,MAAM;AACpBC,IAAAA,qBAAqB,CAACD,OAAD,CAArB;AACA3C,IAAAA,MAAM,CAACe,OAAP,CAAe8B,SAAf,CAAyB,CAAzB,EAA2B,CAA3B,EAA6B/C,KAA7B,EAAoCD,MAApC;;AAEA,SAAK,IAAIiC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,aAAa,CAACS,MAAlC,EAA0CN,CAAC,EAA3C,EAA+C;AAC7CH,MAAAA,aAAa,CAACG,CAAD,CAAb,CAAiBR,MAAjB;AACD;;AACDW,IAAAA,MAAM;AACP,GARD;;AAUA,WAASa,cAAT,GAA4B;AAC1BC,IAAAA,GAAG;AACHC,IAAAA,OAAO,CAACC,GAAR,CAAa,MAAK9C,SAAS,CAACE,CAAE,EAA9B;AACD;;AAKDb,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,SAAS,CAACc,OAAV,GAAoBmC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAApB;AACAnD,IAAAA,MAAM,CAACe,OAAP,GAAiBd,SAAS,CAACc,OAAV,CAAkBqC,UAAlB,CAA6B,IAA7B,CAAjB;AACAnD,IAAAA,SAAS,CAACc,OAAV,CAAkBjB,KAAlB,GAA0BA,KAA1B;AACAG,IAAAA,SAAS,CAACc,OAAV,CAAkBlB,MAAlB,GAA2BA,MAA3B;AACAK,IAAAA,QAAQ,CAACa,OAAT,GAAmB;AACjBV,MAAAA,CAAC,EAAEN,QAAQ,CAACM,CADK;AAEjBC,MAAAA,CAAC,EAACP,QAAQ,CAACO,CAFM;AAGjBC,MAAAA,MAAM,EAAGN,SAAS,CAACc,OAAV,CAAkBlB,MAAlB,GAA0B,EAA1B,GAAgCI,SAAS,CAACc,OAAV,CAAkBjB,KAAlD,GAAwD;AAHhD,KAAnB;AAKA8B,IAAAA,KAAK;AACLe,IAAAA,OAAO;AAKR,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,sBACE;AAAA,2BACE;AAAQ,MAAA,WAAW,EAAEG,cAAc,EAAnC;AAAuC,MAAA,EAAE,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAQD,CApJD;;GAAMlD,U;UAGsBD,mB,EACTD,gB;;;KAJbE,U;AAuJN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useMousePosition } from \"../helper/useMousePosition\";\r\nimport {useWindowDimensions} from '../helper/useWindowDimensions';\r\n\r\n\r\nconst BackGround = () => { \r\n\r\n  \r\n  const { height, width } = useWindowDimensions();\r\n  const position = useMousePosition();\r\n\r\n  const ctxRef = useRef();\r\n  const canvasRef = useRef();\r\n  const mouseRef = useRef();\r\n  const [mouseMove, setMouseMove] = useState({\r\n    x: position.x,\r\n    y: position.y,\r\n    // radius: (canvasRef.current.height/(80) * canvasRef.current.width/80)\r\n    radius: null\r\n  })\r\n\r\n\r\n  class Particle {\r\n    constructor(x, y, directionX, directionY, size, color) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.directionX = directionX;\r\n      this.directionY = directionY;\r\n      this.size= size;\r\n      this.color = color\r\n    }\r\n  \r\n    draw(){\r\n      ctxRef.current.beginPath();\r\n      ctxRef.current.arc(this.x, this.y, this.size, 0, Math.PI * 2, false)\r\n      ctxRef.current.fillStyle = \"rgba(255, 255, 255, 0.2)\";\r\n      ctxRef.current.fill();\r\n    }\r\n  \r\n    update() {\r\n      if (this.x > canvasRef.current.width || this.x < 0) {\r\n        this.directionX = -this.directionX;\r\n      }\r\n      if (this.y > canvasRef.current.height || this.x < 0) {\r\n        this.directionY = -this.directionY\r\n      }\r\n  \r\n      let dx = position.x - this.x;\r\n      let dy = position.y - this.y;\r\n      let distance = Math.sqrt(dx*dx + dy*dy)\r\n      if (distance < mouseRef.current.radius + this.size) {\r\n        if (position.x < this.x && this.x < canvasRef.current.width - this.size * 10) {\r\n          this.x += 10;\r\n        }\r\n        if (position.x > this.x && this.x > this.size * 10 ) {\r\n          this.x -= 10;\r\n        }\r\n        if (position.y < this.y && this.y < canvasRef.current.height - this.size * 10) {\r\n          this.y += 10;\r\n        }\r\n        if (position.y > this.y && this.y > this.size * 10)  {\r\n          this.y -= 10;\r\n        }\r\n      }\r\n      this.x += this.directionX;\r\n      this.y += this.directionY;\r\n      this.draw();\r\n    }\r\n  }\r\n\r\n  let particleArray;\r\n\r\n  \r\n\r\n  const inits = () => {\r\n    particleArray = [];\r\n    let numberOfParticles = (canvasRef.current.height * canvasRef.current.width) / 9000;\r\n    for (let i = 0; i < numberOfParticles*1.2; i++){\r\n      let size = (Math.random() * 5 ) + 1\r\n      let x = (Math.random() * ((width - size * 1) - (size * 1)) + size * 1);\r\n      let y = (Math.random() * ((height - size * 1) - (size * 1)) + size * 1);\r\n      let directionX = (Math.random() * 5) - 2.5;\r\n      let directionY = (Math.random() * 5) - 2.5;\r\n      let color = '#ccc'\r\n      particleArray.push(new Particle(x, y, directionX, directionY, size, color))\r\n    }\r\n    \r\n  \r\n  }\r\n\r\n  const connet = () => {\r\n    let opacityValue = 0.5\r\n    for (let a = 0; a < particleArray.length; a++) {\r\n      for (let b = a; b < particleArray.length; b++) {\r\n        let distance = ((particleArray[a].x - particleArray[b].x) * (particleArray[a].x - particleArray[b].x))\r\n        + ((particleArray[a].y - particleArray[b].y) * (particleArray[a].y - particleArray[b].y));\r\n        if (distance < (canvasRef.current.width/7) * (canvasRef.current.height/7)) {\r\n          opacityValue = 0.5 - (distance/50000);\r\n          ctxRef.current.strokeStyle =`rgba(255, 255, 255, ${opacityValue})`;\r\n          ctxRef.current.lineWidth = 1;\r\n          ctxRef.current.beginPath();\r\n          ctxRef.current.moveTo(particleArray[a].x, particleArray[a].y);\r\n          ctxRef.current.lineTo(particleArray[b].x, particleArray[b].y);\r\n          ctxRef.current.stroke();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const animate = () => {\r\n    requestAnimationFrame(animate);\r\n    ctxRef.current.clearRect(0,0,width, height);\r\n  \r\n    for (let i = 0; i < particleArray.length; i++) {\r\n      particleArray[i].update();\r\n    }\r\n    connet();\r\n  }\r\n\r\n  function updateParticle  () {\r\n    set\r\n    console.log(`x: ${mouseMove.x}`)\r\n  }\r\n\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    canvasRef.current = document.getElementById(\"canvas1\");\r\n    ctxRef.current = canvasRef.current.getContext('2d');\r\n    canvasRef.current.width = width;\r\n    canvasRef.current.height = height;\r\n    mouseRef.current = {\r\n      x: position.x,\r\n      y:position.y,\r\n      radius: (canvasRef.current.height/(80) * canvasRef.current.width/80)\r\n    }\r\n    inits();\r\n    animate();\r\n    \r\n    \r\n    \r\n\r\n  }, []); \r\n\r\n  return (\r\n    <>\r\n      <canvas onMouseMove={updateParticle()} id=\"canvas1\"></canvas>\r\n      {/* width: {width} ~ height: {height}\r\n      {position.x}:{position.y} */}\r\n\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default BackGround;"]},"metadata":{},"sourceType":"module"}